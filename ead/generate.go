// +build ignore

package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"strings"
	"text/template"
)

// NOTE: Currently there is no way to escape backticks in raw strings:
// https://github.com/golang/go/issues/18221
const marshalJSONCodeTemplate = `func ({{.VarName}} *{{.TypeName}}) MarshalJSON() ([]byte, error) {
	type {{.TypeName}}WithTags {{.TypeName}}

	result, err := {{.ConversionFunction}}({{.VarName}}.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string ` + "`" + `json:"value,chardata,omitempty"` + "`\n" +
`		*{{.TypeName}}WithTags
	}{
		Value:             string(result),
		{{.TypeName}}WithTags: (*{{.TypeName}}WithTags)({{.VarName}}),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}`

func main() {
	type templateData struct{
		ConversionFunction string
		TypeName string
		VarName string
	}

	t := template.Must(template.New("").Parse(marshalJSONCodeTemplate))

	conversionFunctionsForTypes := map[string]string{
		"Abstract" : "getConvertedTextWithTags",
		"BibRef" : "getConvertedTextWithTags",
		"Head" : "getConvertedTextWithTags",
		"P" : "getConvertedTextWithTags",
		"TitleProper" : "getConvertedTextWithTagsNoLBConversion",
		"UnitTitle" : "getConvertedTextWithTags",
	}

	w := new(bytes.Buffer)

	w.WriteString(`// Code generated by generate.go; DO NOT EDIT.

package ead

import (
	"encoding/json"
)`)

	for typeName, conversionFunction := range conversionFunctionsForTypes {
		w.WriteString("\n\n")

		err := t.Execute(w, templateData{
			ConversionFunction : conversionFunction,
			TypeName: typeName,
			VarName:  strings.ToLower(typeName),
		})
		if err != nil {
			panic(err)
		}
	}

	// Format with gofmt
	out, err := format.Source(w.Bytes())
	if err != nil {
		panic(err)
	}

	err = ioutil.WriteFile("marshaljson-generated.go", out, 0600)
	if err != nil {
		panic(err)
	}
}
