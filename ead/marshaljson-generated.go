// Code generated by generate.go; DO NOT EDIT.

package ead

import (
	"encoding/json"
	"regexp"
)

func (abstract *Abstract) MarshalJSON() ([]byte, error) {
	type AbstractWithTags Abstract

	result, err := getConvertedTextWithTags(abstract.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*AbstractWithTags
	}{
		Value:            string(result),
		AbstractWithTags: (*AbstractWithTags)(abstract),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (addressline *AddressLine) MarshalJSON() ([]byte, error) {
	type AddressLineWithTags AddressLine

	result, err := getConvertedTextWithTags(addressline.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*AddressLineWithTags
	}{
		Value:               string(result),
		AddressLineWithTags: (*AddressLineWithTags)(addressline),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (archref *ArchRef) MarshalJSON() ([]byte, error) {
	type ArchRefWithTags ArchRef

	result, err := getConvertedTextWithTags(archref.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*ArchRefWithTags
	}{
		Value:           string(result),
		ArchRefWithTags: (*ArchRefWithTags)(archref),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (bibref *BibRef) MarshalJSON() ([]byte, error) {
	type BibRefWithTags BibRef

	result, err := getConvertedTextWithTags(bibref.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*BibRefWithTags
	}{
		Value:          string(result),
		BibRefWithTags: (*BibRefWithTags)(bibref),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (chronitem *ChronItem) MarshalJSON() ([]byte, error) {
	type ChronItemWithTags ChronItem

	result, err := getConvertedTextWithTags(chronitem.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*ChronItemWithTags
	}{
		Value:             string(result),
		ChronItemWithTags: (*ChronItemWithTags)(chronitem),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (container *Container) MarshalJSON() ([]byte, error) {
	type ContainerWithTags Container

	result, err := getConvertedTextWithTags(container.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*ContainerWithTags
	}{
		Value:             string(result),
		ContainerWithTags: (*ContainerWithTags)(container),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (creation *Creation) MarshalJSON() ([]byte, error) {
	type CreationWithTags Creation

	result, err := getConvertedTextWithTags(creation.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*CreationWithTags
	}{
		Value:            string(result),
		CreationWithTags: (*CreationWithTags)(creation),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (date *Date) MarshalJSON() ([]byte, error) {
	type DateWithTags Date

	result, err := getConvertedTextWithTags(date.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*DateWithTags
	}{
		Value:        string(result),
		DateWithTags: (*DateWithTags)(date),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (dimensions *Dimensions) MarshalJSON() ([]byte, error) {
	type DimensionsWithTags Dimensions

	result, err := getConvertedTextWithTags(dimensions.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*DimensionsWithTags
	}{
		Value:              string(result),
		DimensionsWithTags: (*DimensionsWithTags)(dimensions),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (event *Event) MarshalJSON() ([]byte, error) {
	type EventWithTags Event

	result, err := getConvertedTextWithTags(event.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*EventWithTags
	}{
		Value:         string(result),
		EventWithTags: (*EventWithTags)(event),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (head *Head) MarshalJSON() ([]byte, error) {
	type HeadWithTags Head

	result, err := getConvertedTextWithTags(head.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*HeadWithTags
	}{
		Value:        string(result),
		HeadWithTags: (*HeadWithTags)(head),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (item *Item) MarshalJSON() ([]byte, error) {
	type ItemWithTags Item

	result, err := getConvertedTextWithTags(item.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*ItemWithTags
	}{
		Value:        string(result),
		ItemWithTags: (*ItemWithTags)(item),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (langmaterial *LangMaterial) MarshalJSON() ([]byte, error) {
	type LangMaterialWithTags LangMaterial

	result, err := getConvertedTextWithTags(langmaterial.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*LangMaterialWithTags
	}{
		Value:                string(result),
		LangMaterialWithTags: (*LangMaterialWithTags)(langmaterial),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (langusage *LangUsage) MarshalJSON() ([]byte, error) {
	type LangUsageWithTags LangUsage

	result, err := getConvertedTextWithTags(langusage.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*LangUsageWithTags
	}{
		Value:             string(result),
		LangUsageWithTags: (*LangUsageWithTags)(langusage),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (legalstatus *LegalStatus) MarshalJSON() ([]byte, error) {
	type LegalStatusWithTags LegalStatus

	result, err := getConvertedTextWithTags(legalstatus.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*LegalStatusWithTags
	}{
		Value:               string(result),
		LegalStatusWithTags: (*LegalStatusWithTags)(legalstatus),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (num *Num) MarshalJSON() ([]byte, error) {
	type NumWithTags Num

	result, err := getConvertedTextWithTags(num.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*NumWithTags
	}{
		Value:       string(result),
		NumWithTags: (*NumWithTags)(num),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (p *P) MarshalJSON() ([]byte, error) {
	type PWithTags P

	result, err := getConvertedTextWithTags(p.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*PWithTags
	}{
		Value:     string(result),
		PWithTags: (*PWithTags)(p),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (physfacet *PhysFacet) MarshalJSON() ([]byte, error) {
	type PhysFacetWithTags PhysFacet

	result, err := getConvertedTextWithTags(physfacet.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*PhysFacetWithTags
	}{
		Value:             string(result),
		PhysFacetWithTags: (*PhysFacetWithTags)(physfacet),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (physloc *PhysLoc) MarshalJSON() ([]byte, error) {
	type PhysLocWithTags PhysLoc

	result, err := getConvertedTextWithTags(physloc.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*PhysLocWithTags
	}{
		Value:           string(result),
		PhysLocWithTags: (*PhysLocWithTags)(physloc),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (repository *Repository) MarshalJSON() ([]byte, error) {
	type RepositoryWithTags Repository

	result, err := getConvertedTextWithTags(repository.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*RepositoryWithTags
	}{
		Value:              string(result),
		RepositoryWithTags: (*RepositoryWithTags)(repository),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (title *Title) MarshalJSON() ([]byte, error) {
	type TitleWithTags Title

	result, err := getConvertedTextWithTagsNoLBConversion(title.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*TitleWithTags
	}{
		Value:         string(result),
		TitleWithTags: (*TitleWithTags)(title),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (unittitle *UnitTitle) MarshalJSON() ([]byte, error) {
	type UnitTitleWithTags UnitTitle

	result, err := getConvertedTextWithTags(unittitle.Value)
	if err != nil {
		return nil, err
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*UnitTitleWithTags
	}{
		Value:             string(result),
		UnitTitleWithTags: (*UnitTitleWithTags)(unittitle),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}

func (physdesc *PhysDesc) MarshalJSON() ([]byte, error) {
	type PhysDescWithNoWhitespaceOnlyValues PhysDesc

	containsNonWhitespace, err := regexp.MatchString(`\S`, physdesc.Value)
	if err != nil {
		return nil, err
	}

	var value string
	if containsNonWhitespace {
		result, err := getConvertedTextWithTags(physdesc.Value)
		if err != nil {
			return nil, err
		}

		value = string(result)
	} else {
		value = ""
	}

	jsonData, err := json.Marshal(&struct {
		Value string `json:"value,omitempty"`
		*PhysDescWithNoWhitespaceOnlyValues
	}{
		Value:                              value,
		PhysDescWithNoWhitespaceOnlyValues: (*PhysDescWithNoWhitespaceOnlyValues)(physdesc),
	})
	if err != nil {
		return nil, err
	}

	return jsonData, nil
}
